diff --git a/node_modules/agentkeepalive/index.d.ts b/node_modules/agentkeepalive/index.d.ts
index e939889..40ccf5b 100644
--- a/node_modules/agentkeepalive/index.d.ts
+++ b/node_modules/agentkeepalive/index.d.ts
@@ -2,7 +2,7 @@ declare module "agentkeepalive" {
   import * as http from 'http';
   import * as https from 'https';
 
-  export interface AgentStatus {
+  interface AgentStatus {
     createSocketCount: number,
     createSocketErrorCount: number,
     closeSocketCount: number,
@@ -14,7 +14,7 @@ declare module "agentkeepalive" {
     requests: object,
   }
 
-  export interface HttpOptions extends http.AgentOptions {
+  interface HttpOptions extends http.AgentOptions {
     keepAlive?: boolean;
     freeSocketTimeout?: number;
     freeSocketKeepAliveTimeout?: number;
@@ -22,7 +22,7 @@ declare module "agentkeepalive" {
     socketActiveTTL?: number;
   }
 
-  export interface HttpsOptions extends https.AgentOptions {
+  interface HttpsOptions extends https.AgentOptions {
     keepAlive?: boolean;
     freeSocketTimeout?: number;
     freeSocketKeepAliveTimeout?: number;
@@ -30,17 +30,49 @@ declare module "agentkeepalive" {
     socketActiveTTL?: number;
   }
 
-  export default class HttpAgent extends http.Agent {
+  export = HttpAgent
+
+  class HttpAgent extends http.Agent {
     constructor(opts?: HttpOptions);
     readonly statusChanged: boolean;
     createSocket(req: http.IncomingMessage, options: http.RequestOptions, cb: Function): void;
     getCurrentStatus(): AgentStatus;
   }
 
-  export class HttpsAgent extends https.Agent {
-    constructor(opts?: HttpsOptions);
-    readonly statusChanged: boolean;
-    createSocket(req: http.IncomingMessage, options: https.RequestOptions, cb: Function): void;
-    getCurrentStatus(): AgentStatus;
+  namespace HttpAgent {
+    interface AgentStatus {
+      createSocketCount: number,
+      createSocketErrorCount: number,
+      closeSocketCount: number,
+      errorSocketCount: number,
+      timeoutSocketCount: number,
+      requestCount: number,
+      freeSockets: object,
+      sockets: object,
+      requests: object,
+    }
+
+    interface HttpOptions extends http.AgentOptions {
+      keepAlive?: boolean;
+      freeSocketTimeout?: number;
+      freeSocketKeepAliveTimeout?: number;
+      timeout?: number;
+      socketActiveTTL?: number;
+    }
+
+    interface HttpsOptions extends https.AgentOptions {
+      keepAlive?: boolean;
+      freeSocketTimeout?: number;
+      freeSocketKeepAliveTimeout?: number;
+      timeout?: number;
+      socketActiveTTL?: number;
+    }
+
+    class HttpsAgent extends https.Agent {
+      constructor(opts?: HttpsOptions);
+      readonly statusChanged: boolean;
+      createSocket(req: http.IncomingMessage, options: https.RequestOptions, cb: Function): void;
+      getCurrentStatus(): AgentStatus;
+    }
   }
 }
\ No newline at end of file
